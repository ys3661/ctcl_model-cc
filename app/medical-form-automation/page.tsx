"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Separator } from "@/components/ui/separator"
import { ArrowLeft, Download, FileText, Calculator, User, Activity, Clipboard, Database, Upload } from "lucide-react"

// Import the EPIC Export Component
import EpicEmrExport from './EpicEmrExport'

interface PatientData {
  // Patient Information
  name: string
  mrn: string
  dob: string
  age: string
  sex: string

  // Registry Data
  registryId: string
  enrollmentDate: string

  // Body Surface Area Assessment
  headNeck: number
  trunk: number
  upperExtremities: number
  lowerExtremities: number

  // CLIPI Assessment
  clipiAge: boolean
  clipiStage: boolean
  clipiLdh: boolean

  // Clinical Assessment
  clinicalNotes: string
  treatmentPlan: string
  followUpPlan: string

  // EPIC-specific fields
  epicPatientId?: string
  epicEncounterId?: string
}

export default function MedicalFormAutomation() {
  const [patientData, setPatientData] = useState<PatientData>({
    name: "",
    mrn: "",
    dob: "",
    age: "",
    sex: "",
    registryId: "",
    enrollmentDate: "",
    headNeck: 0,
    trunk: 0,
    upperExtremities: 0,
    lowerExtremities: 0,
    clipiAge: false,
    clipiStage: false,
    clipiLdh: false,
    clinicalNotes: "",
    treatmentPlan: "",
    followUpPlan: "",
  })

  // EPIC Configuration - Replace with your actual EPIC settings
  const epicConfig = {
    serverUrl: "https://your-epic-server/api/FHIR/STU3",
    clientId: "your-epic-client-id",
    clientSecret: "your-epic-client-secret"
  }

  // EPIC Export Component (embedded)
  const EpicEmrExport = ({ formData, epicConfig }) => {
    const [exportStatus, setExportStatus] = useState('ready')
    const [exportResults, setExportResults] = useState(null)

    // Generate clinical note text from CTCL assessment data
    const generateClinicalNote = (data) => {
      const timestamp = new Date().toLocaleString()
      
      return `CUTANEOUS T-CELL LYMPHOMA ASSESSMENT

PATIENT: ${data.patientInfo?.firstName || ''} ${data.patientInfo?.lastName || ''}
MRN: ${data.patientInfo?.mrn || ''}
DOB: ${data.patientInfo?.dob || ''}
Date: ${timestamp}

CLINICAL SCORES:
• mSWAT Score: ${data.calculations?.mswat || 0}
• Total Body Surface Area: ${data.calculations?.tbsa || 0}%
• CLIPI Score: ${data.calculations?.clipi || 0}

BODY SURFACE AREA ASSESSMENT:
${data.bodyRegions ? Object.entries(data.bodyRegions)
  .filter(([_, values]) => values.patch > 0 || values.plaque > 0 || values.tumor > 0)
  .map(([region, values]) => 
    `${region}: Patch ${values.patch}%, Plaque ${values.plaque}%, Tumor ${values.tumor}%`
  ).join('\n') || 'No active lesions documented' : 'BSA assessment pending'}

HISTORY:
Previous Treatment: ${data.history?.previousTreatment || 'None documented'}
Current Medications: ${data.history?.currentMedications || 'None documented'}
Family History: ${data.history?.familyHistory || 'Non-contributory'}

PHYSICAL EXAMINATION:
Constitutional: ${data.examination?.constitutional || 'Normal'}
Skin: See BSA breakdown above
Lymph Nodes: ${data.examination?.lymphNodes || 'Normal'}

ASSESSMENT:
${data.assessment?.clinicalImpression || 'CTCL assessment completed with structured scoring'}

PLAN:
${data.assessment?.treatmentPlan || 'Continue current management, follow-up as scheduled'}

NOTES:
${data.assessment?.additionalNotes || 'Assessment completed using standardized CTCL evaluation tool'}

---
Report generated by CTCL Assessment Tool
Provider: ${data.providerInfo?.name || '[Current Provider]'}`
    }

    // Create EPIC FHIR DocumentReference
    const createEpicDocumentReference = (data) => {
      const clinicalNote = generateClinicalNote(data)
      const base64Content = btoa(clinicalNote)
      
      return {
        resourceType: "DocumentReference",
        status: "current",
        docStatus: "final",
        type: {
          coding: [
            {
              system: "http://loinc.org",
              code: "11506-3",
              display: "Progress Note"
            }
          ],
          text: "Progress Notes"
        },
        subject: {
          reference: `Patient/${data.patientInfo?.epicPatientId || data.patientInfo?.mrn}`,
          display: `${data.patientInfo?.firstName || ''} ${data.patientInfo?.lastName || ''}`
        },
        content: [
          {
            attachment: {
              contentType: "text/plain",
              data: base64Content
            }
          }
        ],
        context: {
          encounter: {
            reference: `Encounter/${data.epicEncounterId || epicConfig?.defaultEncounterId}`
          }
        }
      }
    }

    // Direct export to EPIC
    const exportToEpic = async () => {
      if (!formData || !epicConfig) {
        setExportResults({
          success: false,
          error: 'Missing form data or EPIC configuration'
        })
        setExportStatus('error')
        return
      }

      setExportStatus('exporting')
      
      try {
        // Create the DocumentReference
        const documentReference = createEpicDocumentReference(formData)
        
        // Get OAuth token
        const token = await getOAuthToken()
        
        // Post to EPIC
        const response = await fetch(`${epicConfig.serverUrl}/DocumentReference`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/fhir+json',
            'Accept': 'application/fhir+json',
            'Prefer': 'return=representation'
          },
          body: JSON.stringify(documentReference)
        })

        if (!response.ok) {
          const errorData = await response.json()
          throw new Error(
            errorData.issue?.[0]?.details?.text || 
            `EPIC API Error: ${response.status}`
          )
        }

        const result = await response.json()
        
        setExportResults({
          success: true,
          documentId: result.id,
          noteType: 'Progress Note',
          timestamp: new Date().toISOString(),
          patientName: `${formData.patientInfo?.firstName || ''} ${formData.patientInfo?.lastName || ''}`,
          location: response.headers.get('Location')
        })
        
        setExportStatus('success')
        
      } catch (error) {
        console.error('EPIC Export Error:', error)
        setExportResults({
          success: false,
          error: error.message
        })
        setExportStatus('error')
      }
    }

    // OAuth token retrieval
    const getOAuthToken = async () => {
      const tokenEndpoint = `${epicConfig.serverUrl.replace('/api/FHIR/STU3', '')}/oauth2/token`
      
      const params = new URLSearchParams({
        grant_type: 'client_credentials',
        client_id: epicConfig.clientId,
        client_secret: epicConfig.clientSecret,
        scope: 'system/DocumentReference.write'
      })

      const response = await fetch(tokenEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: params
      })

      if (!response.ok) {
        throw new Error(`Authentication failed: ${response.status}`)
      }

      const tokenData = await response.json()
      return tokenData.access_token
    }

    // Check if we have minimum required data
    const canExport = () => {
      return formData?.patientInfo?.mrn && 
             (formData?.patientInfo?.epicPatientId || formData?.patientInfo?.mrn) &&
             epicConfig?.serverUrl && 
             epicConfig?.clientId
    }

    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Database className="mr-2 h-5 w-5" />
            Export to EPIC EMR
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Patient Context Display */}
          <div className="bg-gray-50 rounded-lg p-4">
            <h4 className="font-semibold text-gray-900 mb-2">Patient Context</h4>
            <div className="text-sm text-gray-700 space-y-1">
              <div><strong>Patient:</strong> {formData?.patientInfo?.firstName || ''} {formData?.patientInfo?.lastName || 'Unknown'}</div>
              <div><strong>MRN:</strong> {formData?.patientInfo?.mrn || 'Not provided'}</div>
              <div><strong>EPIC Patient ID:</strong> {formData?.patientInfo?.epicPatientId || 'Using MRN'}</div>
              <div><strong>Encounter:</strong> {formData?.epicEncounterId || 'Current encounter'}</div>
            </div>
          </div>

          {/* Assessment Summary */}
          <div className="bg-blue-50 rounded-lg p-4">
            <h4 className="font-semibold text-blue-900 mb-2">Assessment Summary</h4>
            <div className="grid grid-cols-3 gap-4 text-sm">
              <div className="text-center">
                <div className="font-semibold text-blue-800">mSWAT Score</div>
                <div className="text-2xl font-bold text-blue-600">{formData?.calculations?.mswat || 0}</div>
              </div>
              <div className="text-center">
                <div className="font-semibold text-blue-800">TBSA</div>
                <div className="text-2xl font-bold text-blue-600">{formData?.calculations?.tbsa || 0}%</div>
              </div>
              <div className="text-center">
                <div className="font-semibold text-blue-800">CLIPI</div>
                <div className="text-2xl font-bold text-blue-600">{formData?.calculations?.clipi || 0}</div>
              </div>
            </div>
          </div>

          {/* Export Controls */}
          <div className="border rounded-lg p-4">
            <div className="flex items-center gap-3 mb-3">
              <FileText className="h-5 w-5 text-green-600" />
              <h4 className="font-semibold text-gray-900">File Clinical Note</h4>
            </div>
            
            <p className="text-sm text-gray-600 mb-4">
              This will create a Progress Note in the patient's EPIC chart containing the complete CTCL assessment, 
              including mSWAT scoring, body surface area evaluation, and clinical findings.
            </p>

            <div className="flex gap-3">
              <Button
                onClick={exportToEpic}
                disabled={!canExport() || exportStatus === 'exporting'}
                className={canExport() && exportStatus !== 'exporting' ? '' : 'opacity-50 cursor-not-allowed'}
              >
                {exportStatus === 'exporting' ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                    Filing Note...
                  </>
                ) : (
                  <>
                    <Upload className="h-4 w-4 mr-2" />
                    File to EPIC Chart
                  </>
                )}
              </Button>

              {!canExport() && (
                <div className="text-sm text-red-600 flex items-center gap-1">
                  <AlertCircle className="h-4 w-4" />
                  Missing required patient data or EPIC configuration
                </div>
              )}
            </div>
          </div>

          {/* Export Results */}
          {exportStatus === 'success' && exportResults && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <CheckCircle className="h-5 w-5 text-green-600 mt-0.5" />
                <div>
                  <h4 className="font-semibold text-green-900">Note Successfully Filed</h4>
                  <div className="text-green-700 text-sm mt-1 space-y-1">
                    <div>Patient: {exportResults.patientName}</div>
                    <div>Document ID: {exportResults.documentId}</div>
                    <div>Note Type: {exportResults.noteType}</div>
                    <div>Filed: {new Date(exportResults.timestamp).toLocaleString()}</div>
                    {exportResults.location && (
                      <div>
                        <a 
                          href={exportResults.location} 
                          className="text-blue-600 underline hover:text-blue-800" 
                          target="_blank" 
                          rel="noopener noreferrer"
                        >
                          View in EPIC →
                        </a>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          {exportStatus === 'error' && exportResults && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <AlertCircle className="h-5 w-5 text-red-600 mt-0.5" />
                <div>
                  <h4 className="font-semibold text-red-900">Export Failed</h4>
                  <div className="text-red-700 text-sm mt-1">{exportResults.error}</div>
                  <div className="mt-2 text-xs text-red-600">
                    <div>• Check patient ID and encounter are valid</div>
                    <div>• Verify EPIC credentials and permissions</div>
                    <div>• Ensure encounter is open for documentation</div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    )
  }

  // Calculate mSWAT score
  const calculateMSWAT = () => {
    return patientData.headNeck + patientData.trunk + patientData.upperExtremities + patientData.lowerExtremities
  }

  // Calculate TBSA percentage
  const calculateTBSA = () => {
    // Head/Neck: 9%, Trunk: 36%, Upper Extremities: 18%, Lower Extremities: 36%
    const headNeckPercent = (patientData.headNeck / 6) * 9
    const trunkPercent = (patientData.trunk / 6) * 36
    const upperExtremitiesPercent = (patientData.upperExtremities / 6) * 18
    const lowerExtremitiesPercent = (patientData.lowerExtremities / 6) * 36

    return headNeckPercent + trunkPercent + upperExtremitiesPercent + lowerExtremitiesPercent
  }

  // Calculate CLIPI score
  const calculateCLIPI = () => {
    let score = 0
    if (patientData.clipiAge) score += 1
    if (patientData.clipiStage) score += 1
    if (patientData.clipiLdh) score += 1
    return score
  }

  // Transform data for EPIC export
  const getFormDataForEpic = () => {
    return {
      patientInfo: {
        firstName: patientData.name.split(' ')[0] || '',
        lastName: patientData.name.split(' ').slice(1).join(' ') || '',
        mrn: patientData.mrn,
        dob: patientData.dob,
        gender: patientData.sex,
        epicPatientId: patientData.epicPatientId
      },
      epicEncounterId: patientData.epicEncounterId,
      calculations: {
        mswat: calculateMSWAT(),
        tbsa: calculateTBSA(),
        clipi: calculateCLIPI()
      },
      bodyRegions: {
        'Head/Neck': { 
          patch: patientData.headNeck, 
          plaque: 0, 
          tumor: 0 
        },
        'Trunk': { 
          patch: patientData.trunk, 
          plaque: 0, 
          tumor: 0 
        },
        'Upper Extremities': { 
          patch: patientData.upperExtremities, 
          plaque: 0, 
          tumor: 0 
        },
        'Lower Extremities': { 
          patch: patientData.lowerExtremities, 
          plaque: 0, 
          tumor: 0 
        }
      },
      history: {
        previousTreatment: 'See clinical notes',
        currentMedications: 'See clinical notes',
        familyHistory: 'See clinical notes'
      },
      examination: {
        constitutional: 'See clinical notes',
        lymphNodes: 'See clinical notes'
      },
      assessment: {
        clinicalImpression: patientData.clinicalNotes,
        treatmentPlan: patientData.treatmentPlan,
        additionalNotes: patientData.followUpPlan
      }
    }
  }

  // Generate and export report
  const exportReport = () => {
    const mswat = calculateMSWAT()
    const tbsa = calculateTBSA()
    const clipi = calculateCLIPI()

    const report = `
CTCL MEDICAL ASSESSMENT REPORT
Generated: ${new Date().toLocaleDateString()}

PATIENT INFORMATION
Name: ${patientData.name}
MRN: ${patientData.mrn}
Date of Birth: ${patientData.dob}
Age: ${patientData.age}
Sex: ${patientData.sex}

REGISTRY DATA
Registry ID: ${patientData.registryId}
Enrollment Date: ${patientData.enrollmentDate}

BODY SURFACE AREA ASSESSMENT
Head/Neck: ${patientData.headNeck}/6
Trunk: ${patientData.trunk}/6
Upper Extremities: ${patientData.upperExtremities}/6
Lower Extremities: ${patientData.lowerExtremities}/6

CALCULATED SCORES
mSWAT Score: ${mswat}
TBSA Involvement: ${tbsa.toFixed(1)}%

CLIPI ASSESSMENT
Age > 60 years: ${patientData.clipiAge ? "Yes" : "No"}
Stage III/IV: ${patientData.clipiStage ? "Yes" : "No"}
Elevated LDH: ${patientData.clipiLdh ? "Yes" : "No"}
CLIPI Score: ${clipi}/3

CLINICAL ASSESSMENT
Clinical Notes: ${patientData.clinicalNotes}
Treatment Plan: ${patientData.treatmentPlan}
Follow-up Plan: ${patientData.followUpPlan}
    `

    const blob = new Blob([report], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const link = document.createElement("a")
    link.href = url
    link.download = `CTCL_Assessment_${patientData.name.replace(/\s+/g, "_")}_${new Date().toISOString().split("T")[0]}.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  return (
    <main className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      <div className="container mx-auto py-6 px-4 md:px-6 lg:py-12">
        <div className="mb-6">
          <Button variant="outline" size="sm" onClick={() => window.history.back()}>
            <ArrowLeft className="mr-2 h-4 w-4" /> Back
          </Button>
        </div>

        <div className="mb-8">
          <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent">
            CTCL Medical Assessment Form
          </h1>
          <p className="text-lg text-muted-foreground">
            Comprehensive form for CTCL patient evaluation and documentation
          </p>
        </div>

        <div className="grid gap-8 lg:grid-cols-3">
          {/* Form Section */}
          <div className="lg:col-span-2 space-y-6">
            {/* Patient Information */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <User className="mr-2 h-5 w-5" />
                  Patient Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="patient-name">Patient Name</Label>
                    <Input
                      id="patient-name"
                      value={patientData.name}
                      onChange={(e) => setPatientData({ ...patientData, name: e.target.value })}
                      placeholder="Enter patient name"
                    />
                  </div>
                  <div>
                    <Label htmlFor="mrn">Medical Record Number</Label>
                    <Input
                      id="mrn"
                      value={patientData.mrn}
                      onChange={(e) => setPatientData({ ...patientData, mrn: e.target.value })}
                      placeholder="Enter MRN"
                    />
                  </div>
                  <div>
                    <Label htmlFor="dob">Date of Birth</Label>
                    <Input
                      id="dob"
                      type="date"
                      value={patientData.dob}
                      onChange={(e) => setPatientData({ ...patientData, dob: e.target.value })}
                    />
                  </div>
                  <div>
                    <Label htmlFor="age">Age</Label>
                    <Input
                      id="age"
                      value={patientData.age}
                      onChange={(e) => setPatientData({ ...patientData, age: e.target.value })}
                      placeholder="Enter age"
                    />
                  </div>
                  <div>
                    <Label htmlFor="sex">Sex</Label>
                    <Select
                      value={patientData.sex}
                      onValueChange={(value) => setPatientData({ ...patientData, sex: value })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select sex" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="male">Male</SelectItem>
                        <SelectItem value="female">Female</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  {/* EPIC Fields */}
                  <div>
                    <Label htmlFor="epic-patient-id">EPIC Patient ID (Optional)</Label>
                    <Input
                      id="epic-patient-id"
                      value={patientData.epicPatientId || ''}
                      onChange={(e) => setPatientData({ ...patientData, epicPatientId: e.target.value })}
                      placeholder="Enter EPIC Patient ID"
                    />
                  </div>
                </div>
                <div>
                  <Label htmlFor="epic-encounter-id">EPIC Encounter ID (Optional)</Label>
                  <Input
                    id="epic-encounter-id"
                    value={patientData.epicEncounterId || ''}
                    onChange={(e) => setPatientData({ ...patientData, epicEncounterId: e.target.value })}
                    placeholder="Enter current encounter ID"
                  />
                </div>
              </CardContent>
            </Card>

            {/* Registry Data */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Clipboard className="mr-2 h-5 w-5" />
                  Registry Data
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="registry-id">Registry ID</Label>
                    <Input
                      id="registry-id"
                      value={patientData.registryId}
                      onChange={(e) => setPatientData({ ...patientData, registryId: e.target.value })}
                      placeholder="Enter registry ID"
                    />
                  </div>
                  <div>
                    <Label htmlFor="enrollment-date">Enrollment Date</Label>
                    <Input
                      id="enrollment-date"
                      type="date"
                      value={patientData.enrollmentDate}
                      onChange={(e) => setPatientData({ ...patientData, enrollmentDate: e.target.value })}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Body Surface Area Assessment */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Activity className="mr-2 h-5 w-5" />
                  Body Surface Area Assessment
                </CardTitle>
                <CardDescription>Rate each body region from 0-6 based on involvement severity</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="head-neck">Head/Neck (0-6)</Label>
                    <Input
                      id="head-neck"
                      type="number"
                      min="0"
                      max="6"
                      value={patientData.headNeck}
                      onChange={(e) =>
                        setPatientData({ ...patientData, headNeck: Number.parseInt(e.target.value) || 0 })
                      }
                    />
                  </div>
                  <div>
                    <Label htmlFor="trunk">Trunk (0-6)</Label>
                    <Input
                      id="trunk"
                      type="number"
                      min="0"
                      max="6"
                      value={patientData.trunk}
                      onChange={(e) => setPatientData({ ...patientData, trunk: Number.parseInt(e.target.value) || 0 })}
                    />
                  </div>
                  <div>
                    <Label htmlFor="upper-extremities">Upper Extremities (0-6)</Label>
                    <Input
                      id="upper-extremities"
                      type="number"
                      min="0"
                      max="6"
                      value={patientData.upperExtremities}
                      onChange={(e) =>
                        setPatientData({ ...patientData, upperExtremities: Number.parseInt(e.target.value) || 0 })
                      }
                    />
                  </div>
                  <div>
                    <Label htmlFor="lower-extremities">Lower Extremities (0-6)</Label>
                    <Input
                      id="lower-extremities"
                      type="number"
                      min="0"
                      max="6"
                      value={patientData.lowerExtremities}
                      onChange={(e) =>
                        setPatientData({ ...patientData, lowerExtremities: Number.parseInt(e.target.value) || 0 })
                      }
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* CLIPI Assessment */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Calculator className="mr-2 h-5 w-5" />
                  CLIPI Assessment
                </CardTitle>
                <CardDescription>Cutaneous Lymphoma International Prognostic Index</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="clipi-age"
                      checked={patientData.clipiAge}
                      onCheckedChange={(checked) => setPatientData({ ...patientData, clipiAge: checked as boolean })}
                    />
                    <Label htmlFor="clipi-age">Age over 60 years</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="clipi-stage"
                      checked={patientData.clipiStage}
                      onCheckedChange={(checked) => setPatientData({ ...patientData, clipiStage: checked as boolean })}
                    />
                    <Label htmlFor="clipi-stage">Stage III/IV disease</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="clipi-ldh"
                      checked={patientData.clipiLdh}
                      onCheckedChange={(checked) => setPatientData({ ...patientData, clipiLdh: checked as boolean })}
                    />
                    <Label htmlFor="clipi-ldh">Elevated LDH</Label>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Clinical Assessment */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <FileText className="mr-2 h-5 w-5" />
                  Clinical Assessment
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="clinical-notes">Clinical Notes</Label>
                  <Textarea
                    id="clinical-notes"
                    value={patientData.clinicalNotes}
                    onChange={(e) => setPatientData({ ...patientData, clinicalNotes: e.target.value })}
                    placeholder="Enter clinical observations and findings..."
                    rows={4}
                  />
                </div>
                <div>
                  <Label htmlFor="treatment-plan">Treatment Plan</Label>
                  <Textarea
                    id="treatment-plan"
                    value={patientData.treatmentPlan}
                    onChange={(e) => setPatientData({ ...patientData, treatmentPlan: e.target.value })}
                    placeholder="Enter proposed treatment plan..."
                    rows={3}
                  />
                </div>
                <div>
                  <Label htmlFor="follow-up-plan">Follow-up Plan</Label>
                  <Textarea
                    id="follow-up-plan"
                    value={patientData.followUpPlan}
                    onChange={(e) => setPatientData({ ...patientData, followUpPlan: e.target.value })}
                    placeholder="Enter follow-up recommendations..."
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>

            {/* EPIC Export Integration */}
            <EpicEmrExport 
              formData={getFormDataForEpic()}
              epicConfig={epicConfig}
            />
          </div>

          {/* Summary Panel */}
          <div className="space-y-6">
            <Card className="sticky top-6">
              <CardHeader>
                <CardTitle>Assessment Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-medium mb-2">Calculated Scores</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>mSWAT Score:</span>
                      <span className="font-medium">{calculateMSWAT()}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>TBSA Involvement:</span>
                      <span className="font-medium">{calculateTBSA().toFixed(1)}%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>CLIPI Score:</span>
                      <span className="font-medium">{calculateCLIPI()}/3</span>
                    </div>
                  </div>
                </div>

                <Separator />

                <div>
                  <h4 className="font-medium mb-2">Patient Info</h4>
                  <div className="space-y-1 text-sm text-muted-foreground">
                    <div>Name: {patientData.name || "Not entered"}</div>
                    <div>MRN: {patientData.mrn || "Not entered"}</div>
                    <div>Age: {patientData.age || "Not entered"}</div>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium mb-2">EPIC Integration</h4>
                  <div className="space-y-1 text-sm text-muted-foreground">
                    {epicConfig.configured ? (
                      <>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="h-3 w-3 text-green-600" />
                          <span>Connected to {epicConfig.organizationName || 'EPIC'}</span>
                        </div>
                        <div>Patient ID: {patientData.epicPatientId || patientData.mrn || "Using MRN"}</div>
                        <div>Encounter: {patientData.epicEncounterId || "Current"}</div>
                      </>
                    ) : (
                      <div className="flex items-center gap-2">
                        <AlertCircle className="h-3 w-3 text-amber-600" />
                        <span>Not configured</span>
                      </div>
                    )}
                  </div>
                </div>

                <Button onClick={exportReport} className="w-full" disabled={!patientData.name || !patientData.mrn}>
                  <Download className="mr-2 h-4 w-4" />
                  Export Report
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </main>
  )
}
